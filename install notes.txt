acvm270_keypress.c - simulate keypress in HA->MQTT->Pi->RS485-HAT->Nibe

acvm270_display.c - read nibe bus (display messages) /dev/ttyUSB1->Pi->MQTT->HA (ttyUSB1 is removed when program starts, gets used by serial number instead)

acvm270.py - read nibe bus (all messages) Nibe->/dev/ttyRS485_A->Pi->MQTT->HA

relay.py - cut connection to Nibe bus in case of faulty pi or program hanging

#######################################################################################
pi4b - bullseye light 32bit
2x ftdi rs485-usb
1x waveshare rs485 HAT
#######################################################################################
/boot/config.txt
enable_uart=1

sudo apt update
sudo reboot
#######################################################################################
pigpio ( https://abyz.me.uk/rpi/pigpio/download.html ):
sudo apt install python-setuptools python3-setuptools
wget https://github.com/joan2937/pigpio/archive/master.zip
unzip master.zip
cd pigpio-master
make
sudo make install
cd
#######################################################################################
for python:
sudo apt update
sudo apt install python3-pip
sudo pip3 install pyserial
sudo pip3 install paho-mqtt
#######################################################################################
for paho mqtt:
sudo apt install git
git clone https://github.com/eclipse-paho/paho.mqtt.c
cd paho.mqtt.c
sudo apt-get install build-essential gcc make cmake cmake-gui cmake-curses-gui
sudo apt-get install fakeroot devscripts dh-make lsb-release
sudo apt-get install libssl-dev
sudo apt-get install doxygen graphviz
make
sudo make install
cd
#######################################################################################
acvm270_display (USB1):
sudo apt-get install libftdi-dev
wget https://raw.githubusercontent.com/Vitalic66/nibe/refs/heads/main/acvm270_display.c
gcc -o display_c display_c.c -lftdi -lpaho-mqtt3c
sudo cp acvm270_display /usr/local/bin/acvm270_display
sudo chmod 755 /usr/local/bin/acvm270_display

#######################################################################################
acvm270_keypress (RS485 HAT):
wget https://raw.githubusercontent.com/Vitalic66/nibe/refs/heads/main/acvm270_keypress.c
gcc -o kp_mqtt kp_mqtt.c -lpigpio -lpaho-mqtt3c -lrt -lpthread
sudo cp acvm270_keypress /usr/local/bin/acvm270_keypress
sudo chmod 755 /usr/local/bin/acvm270_keypress

#######################################################################################
relay (gpio 18):
sudo apt-get install rpi.gpio
wget https://raw.githubusercontent.com/Vitalic66/nibe/refs/heads/main/relay.py
sudo cp relay.py /usr/local/bin/relay.py
sudo chmod 755 /usr/local/bin/relay.py

#######################################################################################
acvm270 (USB0):
wget https://raw.githubusercontent.com/Vitalic66/nibe/refs/heads/main/acvm270.py
sudo cp acvm270.py /usr/local/bin/acvm270.py
sudo chmod 755 /usr/local/bin/acvm270.py

#######################################################################################
usb dongles:

sudo nano /etc/udev/rules.d/10-usb-dongle.rules

old version:
SUBSYSTEM=="tty", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", ATTRS{serial}=="B001Y6HU", SYMLINK+="ttyUSB0"
SUBSYSTEM=="tty", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", ATTRS{serial}=="B001YIW0", SYMLINK+="ttyUSB1"

active version:

# Adapter mit SN=B001Y6HU -> fester Name
ACTION=="add", SUBSYSTEM=="tty", KERNEL=="ttyUSB*", \
  ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", ATTRS{serial}=="B001Y6HU", \
  SYMLINK+="ttyRS485_A", GROUP="dialout", MODE="0660"

# Adapter mit SN=B001YIW0 -> anderer fester Name
#ACTION=="add", SUBSYSTEM=="tty", KERNEL=="ttyUSB*", \
#  ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", ATTRS{serial}=="B001YIW0", \
#  SYMLINK+="ttyRS485_B", GROUP="dialout", MODE="0660"


sudo udevadm control --reload-rules

######################################################################################
services:

######################################################################################
sudo nano /etc/systemd/system/acvm270_display.service

[Unit]
Description=acvm270 display
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/acvm270_display
Restart=always
RestartSec=3
# Optional: weitere Parameter wie Environment, WorkingDirectory etc.

[Install]
WantedBy=multi-user.target

######################################################################################
sudo nano /etc/systemd/system/acvm270_keypress.service
neu:

[Unit]
Description=acvm270 keypress (C binary, no logs)
Requires=rs485-relay.service
After=rs485-relay.service

# Wenn du „späten“ Start willst (nach Boot fertig), entkommentiere:
# Wants=network-online.target
# After=network-online.target

[Service]
Type=simple
ExecStart=/usr/local/bin/acvm270_keypress
Restart=on-failure
RestartSec=2
# Kein Journald
StandardOutput=null
StandardError=null
# (falls das Binary WorkingDirectory braucht, hier setzen)
# WorkingDirectory=/usr/local/bin

[Install]
WantedBy=multi-user.target

######################################################################################
veraltet:

[Unit]
Description=acvm270 keypress
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/acvm270_keypress
Restart=always
RestartSec=3
# Optional: weitere Parameter wie Environment, WorkingDirectory etc.

[Install]
WantedBy=multi-user.target

##########################################################################################
sudo nano /etc/systemd/system/acvm270.service

[Unit]
Description=ACVM270 Logger Service
After=network.target

[Service]
WorkingDirectory=/usr/local/bin
ExecStart=/usr/bin/python3 /usr/local/bin/acvm270.py
Restart=always
RestartSec=5
#StandardOutput=journal
#StandardError=journal

[Install]
WantedBy=multi-user.target

##########################################################################################
neu:
sudo nano /etc/systemd/system/rs485-relay.service

[Unit]
Description=RS485 relay enable on GPIO18 (no logs)
Before=acvm270_keypress.service
PartOf=acvm270_keypress.service

[Service]
Type=oneshot
# Relais EIN (GPIO18 Output, Drive High)
ExecStart=/usr/bin/raspi-gpio set 18 op dh
# Relais AUS (GPIO18 Output, Drive Low)
ExecStop=/usr/bin/raspi-gpio set 18 op dl
RemainAfterExit=yes
# Kein Journald
StandardOutput=null
StandardError=null

[Install]
WantedBy=multi-user.target

##########################################################################################

veraltet:
sudo nano /etc/systemd/system/relay.service

[Unit]
Description=relay
After=network.target

[Service]
WorkingDirectory=/usr/local/bin
ExecStart=/usr/bin/python3 /usr/local/bin/relay.py
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target

##########################################################################################
if existss in /boot/cmdline.txt
remove
console=serial0,115200

##########################################################################################

sudo systemctl daemon-reload
sudo systemctl enable acvm270_keypress.service
sudo systemctl start acvm270_keypress.service
sudo systemctl enable relay.service
sudo systemctl start relay.service
sudo systemctl enable acvm270.service
sudo systemctl start acvm270.service
sudo systemctl enable acvm270_display.service
sudo systemctl start acvm270_display.service

##########################################################################################

make it read only fs

sudo nano /etc/fstab
change:
PARTUUID=xxxx-xxxx  /  ext4  defaults,noatime  0  1
to:
PARTUUID=xxxx-xxxx  /  ext4  ro,noatime  0  1
add:
tmpfs   /tmp        tmpfs   defaults,noatime,nosuid,nodev,mode=1777,size=50M   0  0
tmpfs   /var/tmp    tmpfs   defaults,noatime,nosuid,nodev,mode=1777,size=20M   0  0
tmpfs   /var/log    tmpfs   defaults,noatime,nosuid,nodev,mode=0755,size=50M   0  0
tmpfs   /run        tmpfs   defaults,noatime,nosuid,nodev,mode=0755,size=100M   0  0

close & save

sudo rm -rf /var/log/*
sudo touch /var/log/syslog
sudo touch /var/log/messages
sudo chmod 644 /var/log/*


